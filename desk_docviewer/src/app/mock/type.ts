/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ComplexForm = BaseAction;
export type Drone = BaseItem & {
  hit: number;
  stats: {
    acceleration: number;
    armor: number;
    autopilot: number;
    maniability_flat: number;
    maniability_rough: number;
    max_speed: number;
    resistance: number;
    sensors: number;
    step: number;
  };
};
export type OtherCompanion = Companion & {
  stats?: {
    action_maj: number;
    action_min: number;
    agi: number;
    cha: number;
    con: number;
    for: number;
    hit: number;
    int: number;
    log: number;
    pui?: number;
    rea: number;
    vol: number;
  };
};
export type Outfit = BaseItem & {
  actions?: {
    [k: string]: BaseAction2;
  };
};
export type Ritual = BaseAction3 & {
  descriptions?: {
    base?: string;
  } & {
    [k: string]: string;
  };
};
export type Spell = BaseAction4 & {
  descriptions?: {
    base?: string;
  } & {
    [k: string]: string;
  };
};
export type Spirit = Companion & {
  stats?: {
    action_maj: number;
    action_min: number;
    agi: number;
    con: number;
    for: number;
    hit: {
      base: number;
      factor: number;
    };
    rea: number;
  };
};
export type Sprite = Companion & {
  stats?: {
    action_maj: number;
    action_min: number;
    attaque: number;
    corruption: number;
    firewall: number;
    hit: {
      base: number;
      factor: number;
    };
    traitement: number;
  };
};
export type Tech = BaseItem & {
  stats?: {
    attaque: number;
    corruption: number;
    firewall: number;
    traitement: number;
  };
};
export type Weapon = BaseItem & {
  actions?: {
    recharger?: LoadAction;
    tir?: ShotAction;
    tir_rafale?: ShotAction;
    tir_semi_auto?: ShotAction;
  } & {
    [k: string]: BaseAction5;
  };
  ammo?: number;
  damage?: number;
  damage_type?: string;
  range_labels?: RangeLabels;
  ranges?: RangeScores;
};
/**
 * This interface was referenced by `RangeLabels`'s JSON-Schema definition
 * via the `patternProperty` "r[0-9]*".
 */
export type RangeEnum = "contact" | "near" | "short" | "medium" | "far";

export interface Character {
  complex_forms?: {
    [k: string]: ComplexForm;
  };
  drones?: {
    [k: string]: Drone;
  };
  effects?: Effect[];
  identities?: Identity[];
  knowledges?: string[];
  name?: string;
  other?: {
    [k: string]: BaseItem1;
  };
  other_companions?: {
    [k: string]: OtherCompanion;
  };
  outfits?: {
    [k: string]: Outfit;
  };
  rituals?: {
    [k: string]: Ritual;
  };
  skills: Skills;
  spells?: {
    [k: string]: Spell;
  };
  spirits?: {
    [k: string]: Spirit;
  };
  sprites?: {
    [k: string]: Sprite;
  };
  stats: Stats;
  tags?: string[];
  tech?: {
    [k: string]: Tech;
  };
  weapons?: {
    [k: string]: Weapon;
  };
}
export interface BaseAction {
  damage?: number;
  damage_type?: string;
  description?: string;
  duration?: string;
  gauge?: number;
  maintained?: boolean;
  major: number;
  minor: number;
  nature?: "physique" | "mana" | "duale";
  range?: "contact" | "LDV" | "perso";
  score?: number;
  threshold?: number;
  type?: string;
  zone?: boolean;
}
export interface BaseItem {
  concealment?: number;
  description?: string;
  legal: boolean;
  licenced: boolean;
  manufacturer?: string;
  name: string;
  price: number;
  quality?: number;
  quantity?: number;
  slots?: Slot[];
  type?: string;
}
export interface Slot {
  concealment?: number;
  name: string;
  size: "S" | "M" | "L" | "XL";
}
export interface Effect {
  description?: string;
  name?: string;
  type?: string;
}
export interface Identity {
  contacts?: Contact[];
  description?: string;
  licences?: Licences[];
  lifestyle?: Lifestyle;
  name?: string;
  nuyens?: number;
  price?: number;
  quality?: string;
}
export interface Contact {
  connection: number;
  description?: string;
  loyalty: number;
  name: string;
}
export interface Licences {
  description?: string;
  name: string;
  price: number;
  quality: string;
}
export interface Lifestyle {
  name: string;
  price: number;
}
export interface BaseItem1 {
  concealment?: number;
  description?: string;
  legal: boolean;
  licenced: boolean;
  manufacturer?: string;
  name: string;
  price: number;
  quality?: number;
  quantity?: number;
  slots?: Slot[];
  type?: string;
}
export interface Companion {
  actions?: {
    [k: string]: BaseAction1;
  };
  description?: string;
  effects?: Effect[];
  skills?: string[];
}
export interface BaseAction1 {
  damage?: number;
  damage_type?: string;
  description?: string;
  duration?: string;
  gauge?: number;
  maintained?: boolean;
  major?: number;
  minor?: number;
  nature?: "physique" | "mana" | "duale";
  range?: "contact" | "LDV" | "perso";
  score?: number;
  threshold?: number;
  type?: string;
  zone?: boolean;
}
export interface BaseAction2 {
  damage?: number;
  damage_type?: string;
  description?: string;
  duration?: string;
  gauge?: number;
  maintained?: boolean;
  major?: number;
  minor?: number;
  nature?: "physique" | "mana" | "duale";
  range?: "contact" | "LDV" | "perso";
  score?: number;
  threshold?: number;
  type?: string;
  zone?: boolean;
}
export interface BaseAction3 {
  damage?: number;
  damage_type?: string;
  description?: string;
  duration: string;
  gauge?: number;
  maintained?: boolean;
  major?: number;
  minor?: number;
  nature?: "physique" | "mana" | "duale";
  range?: "contact" | "LDV" | "perso";
  score?: number;
  threshold: number;
  type?: string;
  zone?: boolean;
}
export interface Skills {
  armes_à_feu?: Skill;
  astral?: Skill;
  athlétisme?: Skill;
  "combat.rapp"?: Skill;
  conjuration?: Skill;
  electronique?: Skill;
  furtivité?: Skill;
  ingénierie?: Skill;
  perception?: Skill;
  pilotage?: Skill;
  plein_air?: Skill;
  sorcellerie?: Skill;
  technomancie?: Skill;
}
export interface Skill {
  base: number;
  expertises?: string[];
  specialisations?: string[];
}
export interface BaseAction4 {
  damage?: number;
  damage_type?: string;
  description?: string;
  duration?: string;
  gauge?: number;
  maintained?: boolean;
  major: number;
  minor: number;
  nature?: "physique" | "mana" | "duale";
  range?: "contact" | "LDV" | "perso";
  score?: number;
  threshold?: number;
  type?: string;
  zone?: boolean;
}
export interface Stats {
  action_maj: number;
  action_min: number;
  agi: number;
  agi_mod?: number;
  attaque?: number;
  cha: number;
  cha_mod?: number;
  con: number;
  con_mod?: number;
  corruption?: number;
  def_ment: ReferStat;
  def_phy: ReferStat;
  edge: number;
  ess: number;
  firewall?: number;
  for: number;
  for_mod?: number;
  hit_over: number;
  hit_phy: number;
  hit_stun: number;
  init: ReferStat;
  init_dice: number;
  initiation?: number;
  int: number;
  int_mod?: number;
  log: number;
  log_mod?: number;
  mag?: number;
  max_edge: number;
  natural_heal: ReferStat;
  rea: number;
  rea_mod?: number;
  res?: number;
  resist_drain?: ReferStat;
  resist_ment: ReferStat;
  resist_phy: ReferStat;
  submersion?: number;
  traitement?: number;
  vol: number;
  vol_mod?: number;
}
export interface ReferStat {
  score: number;
  stat: ("con" | "agi" | "rea" | "for" | "vol" | "log" | "int" | "cha")[];
}
export interface LoadAction {
  ammo: number;
  description?: string;
  major: number;
  minor: number;
}
export interface ShotAction {
  ammo_consumption: number;
  damage: number;
  damage_type: string;
  description?: string;
  major: number;
  minor: number;
  ranges: RangeScores;
}
export interface RangeScores {
  /**
   * This interface was referenced by `RangeScores`'s JSON-Schema definition
   * via the `patternProperty` ".*".
   */
  [k: string]: number;
}
export interface BaseAction5 {
  damage?: number;
  damage_type?: string;
  description?: string;
  duration?: string;
  gauge?: number;
  maintained?: boolean;
  major?: number;
  minor?: number;
  nature?: "physique" | "mana" | "duale";
  range?: "contact" | "LDV" | "perso";
  score?: number;
  threshold?: number;
  type?: string;
  zone?: boolean;
}
export interface RangeLabels {
  [k: string]: RangeEnum;
}
